---
import Layout from "@layouts/Layout.astro";
import { actions } from "astro:actions";
import { Image } from "astro:assets";
import UpdateRating from "@components/UpdateRating.astro";

const viewerId = Number(Astro.params.id);
const ratingId = Number(Astro.params.ratingId);
const auth = Astro.locals.auth();
const { data: isAdmin } = await Astro.callAction(actions.viewers.checkAdmin, {
  clerkId: auth?.userId ?? "",
});
const { data: currentViewer } = await Astro.callAction(
  actions.viewers.getCurrentViewer,
  {
    clerkId: auth?.userId ?? "",
  }
);

// Page viewer data
const { data: viewer, error } = await Astro.callAction(
  actions.viewers.getViewerById,
  { viewerId }
);

if (error || !viewer || "error" in viewer) {
  console.error("Error fetching viewer:", error || "Viewer not found");
  return Astro.redirect("/404");
}

// Get rating data
const { data: rating, error: ratingError } = await Astro.callAction(
  actions.ratings.getRatingById,
  {
    ratingId,
  }
);

if (ratingError || !rating) {
  console.error("Error fetching rating:", ratingError);
  return Astro.redirect("/404");
}

// Get movie data
const { data: movie, error: movieError } = await Astro.callAction(
  actions.movies.getMovieById,
  {
    movieId: Number(rating.movieId),
  }
);

if (movieError || !movie) {
  console.error("Error fetching movie:", movieError || "Movie not found");
  return Astro.redirect("/404");
}

const { data: omdbData, error: omdbError } = await Astro.callAction(
  actions.omdb.getOmdbFilm,
  {
    title: String(movie.title),
  }
);

if (omdbError) {
  console.error("Error fetching OMDB data:", omdbError);
}
---

<Layout title={`${viewer.name}'s rating for '${rating.movieTitle}'`}>
  {
    movie && (
      <div class="container mx-auto p-4 text-white">
        <h1 class="text-4xl font-bold mb-4">{movie.title}</h1>

        {omdb && (
          <div class="flex flex-col md:flex-row bg-gray-800 p-4 rounded-lg shadow-lg">
            <Image
              src={omdb.Poster}
              alt={omdb.Title}
              height={288}
              width={192}
              class="w-48 h-72 object-cover rounded-lg mb-4 md:mb-0 md:mr-4"
            />
            <div class="flex-1">
              <p class="text-lg mb-2">
                <span class="font-bold">Year: </span> {omdb.Year}
              </p>
              <p class="text-lg mb-2">
                <span class="font-bold">Rated: </span> {omdb.Rated}
              </p>
              <p class="text-lg mb-2">
                <span class="font-bold">Runtime: </span> {omdb.Runtime}
              </p>
              <p class="text-lg mb-2">
                <span class="font-bold">Genre: </span> {omdb.Genre}
              </p>
              <p class="text-lg mb-2">
                <span class="font-bold">Director: </span> {omdb.Director}
              </p>
              <p class="text-lg mb-2">
                <span class="font-bold">Actors: </span> {omdb.Actors}
              </p>
              <p class="text-lg mb-2">
                <span class="font-bold">Plot: </span> {omdb.Plot}
              </p>
            </div>
          </div>
        )}
      </div>
    )
  }
  <div
    class="container mx-auto p-6 text-white bg-gray-900 rounded-lg shadow-lg gap-4"
  >
    {
      isViewer ? (
        <div class="flex flex-col">
          <h2 class="text-2xl font-bold mb-4">Your rating:</h2>
          <UpdateRating
            rating={{
              id: Number(rating.id),
              movieId: Number(rating.movieId),
              score: Number(rating.score),
              movieTitle: String(rating.movieTitle),
            }}
          />
        </div>
      ) : (
        <div class="flex flex-col items-center justify-center">
          <h2 class="text-2xl font-bold mb-4">
            {viewer.name}'s rating for {rating.movieTitle}
          </h2>
          <p class="text-2xl font-bold">{rating.score}</p>
        </div>
      )
    }
  </div>
</Layout>
