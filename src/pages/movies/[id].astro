---
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { actions } from "astro:actions";
import { Image } from "astro:assets";

const moviesCollection = await getCollection("Movies");
const movieEntry = moviesCollection.find((m) => m.id === Astro.params.id);
if (!movieEntry) return Astro.redirect("/404");
const movieContent = movieEntry ? movieEntry.data : null;

const movie = await Astro.callAction(actions.movies.getMovieWithRatings, {
  movieId: Astro.params.id as string,
  sort: "RATING_SCORE_DESC",
});

// get the OMDB data
const omdb = await Astro.callAction(actions.omdb.getOmdbFilm, {
  title: movieContent?.title ?? "",
  // TODO: Move to experimental astro:env
  apiKey: import.meta.env.OMDB_API_KEY as string,
});

// Calculate average rating and truncate to 2 decimal places
const calculateAverage = (ratings: any[]) => {
  if (!ratings || ratings.length === 0) return 0;
  const total = ratings.reduce(
    (acc: any, rating: { score: any }) => acc + rating.score,
    0
  );
  const average = total / ratings.length;
  return Math.floor(average * 100) / 100; // Truncate to 2 decimal places
};

// get the ratings and add the viewerName to each rating. ratings is an array of objects with viewerId, id, and score
const ratings = movie.data ? movie.data[0].ratings : [];
---

{
  movieContent && (
    <Layout title={movieContent.title}>
      <div class="container mx-auto p-4 text-white">
        <h1 class="text-4xl font-bold mb-4">{movieContent.title}</h1>
        {movie.data && (
          <p class="text-lg mb-2">Average: {calculateAverage(ratings)}</p>
        )}

        {omdb && (
          <div class="flex flex-col md:flex-row bg-gray-800 p-4 rounded-lg shadow-lg">
            <Image
              src={omdb.data.Poster}
              alt={omdb.data.Title}
              height={288}
              width={192}
              class="w-48 h-72 object-cover rounded-lg mb-4 md:mb-0 md:mr-4"
              transition:name={omdb.data.Poster}
            />
            <div class="flex-1">
              <p class="text-lg mb-2">
                <span class="font-bold">Year: </span> {omdb.data.Year}
              </p>
              <p class="text-lg mb-2">
                <span class="font-bold">Rated: </span> {omdb.data.Rated}
              </p>
              <p class="text-lg mb-2">
                <span class="font-bold">Runtime: </span> {omdb.data.Runtime}
              </p>
              <p class="text-lg mb-2">
                <span class="font-bold">Genre: </span> {omdb.data.Genre}
              </p>
              <p class="text-lg mb-2">
                <span class="font-bold">Director: </span> {omdb.data.Director}
              </p>
              <p class="text-lg mb-2">
                <span class="font-bold">Actors: </span> {omdb.data.Actors}
              </p>
              <p class="text-lg mb-2">
                <span class="font-bold">Plot: </span> {omdb.data.Plot}
              </p>
            </div>
          </div>
        )}

        <div class="overflow-x-auto">
          <table class="min-w-full bg-gray-800 rounded-lg table-fixed">
            <thead>
              <tr class="bg-gray-700 text-left text-gray-300">
                <th class="py-2 px-4 border-b border-gray-600 w-1/4">Viewer</th>
                <th class="py-2 px-4 border-b border-gray-600 w-3/4">Rating</th>
              </tr>
            </thead>
            <tbody>
              {ratings &&
                ratings.map((rating) => (
                  <tr class="hover:bg-gray-700">
                    <td class="py-2 px-4 border-b border-gray-600 hover:bg-gray-600">
                      <a
                        href={`/viewers/${rating.viewerId}`}
                        class="block text-sm underline h-full w-full"
                      >
                        {rating.viewerName}
                      </a>
                    </td>
                    <td class="py-2 px-4 border-b border-gray-600 hover:bg-gray-600">
                      <a
                        href={`/viewers/${rating.viewerId}/ratings/${rating.id}`}
                        class="block text-lg font-bold underline h-full w-full"
                      >
                        {rating.score}
                      </a>
                    </td>
                  </tr>
                ))}
            </tbody>
          </table>
        </div>
      </div>
    </Layout>
  )
}
