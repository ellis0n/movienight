---
import { actions } from "astro:actions";
import {
  SignedIn,
  SignedOut,
  UserButton,
  SignInButton,
} from "@clerk/astro/components";

const auth = Astro.locals.auth();

let userViewer = null;
if (auth.userId) {
  userViewer = await Astro.callAction(actions.viewers.getViewerByClerkId, {
    clerkId: auth.userId,
  });
}
---

<div
  id="sidebar"
  class="fixed top-0 left-0 z-20 flex flex-row flex-shrink-0 hidden w-64 h-full pt-16 font-normal duration-300 lg:flex transition-all"
>
  <div
    class="relative flex flex-col flex-1 min-h-0 bg-white dark:bg-gray-800 dark:border-gray-700"
  >
    <div
      class="flex flex-col flex-1 pt-5 pb-6 overflow-y-auto scrollbar scrollbar-w-2 scrollbar-thumb-rounded-md scrollbar-slate-200 dark:scrollbar-thumb-slate-900"
    >
      <SignedOut >
        <SignInButton
          mode="modal"
          class="px-4 py-2 mx-4 my-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors duration-150"
        />
      </SignedOut>
      <SignedIn>
        {
          userViewer && (
            <UserButton />
            <a
              href={`/viewers/${userViewer.data?.id}`}
              class="block px-4 py-2 mx-4 my-2 text-sm font-medium text-gray-800 dark:text-gray-200 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-150"
            >
              {userViewer.data?.name}'s Profile
            </a>
          )
        }
      </SignedIn>
      <nav class="rounded-md">
        <div class="container mx-auto p-4">
          <ul class="space-y-2 text-lg text-white">
            <li>
              <a
                href="/movies"
                class="block px-4 py-2 rounded-lg hover:bg-slate-600 transition-colors duration-150"
                >movies</a
              >
            </li>
            <li>
              <a
                href="/thelist"
                class="block px-4 py-2 rounded-lg hover:bg-slate-600 transition-colors duration-150"
                >the list</a
              >
            </li>
            <li>
              <a
                href="/viewers"
                class="block px-4 py-2 rounded-lg hover:bg-slate-600 transition-colors duration-150"
                >viewers</a
              >
            </li>
          </ul>
        </div>
      </nav>
    </div>
  </div>
  <div
    id="toggle-aside"
    class="w-6 bg-white dark:bg-gray-800 cursor-pointer transition-all duration-300 ease-in-out flex items-center justify-center shadow-[1px_0_0_0_rgba(0,0,0,0.1)]"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-4 w-4 text-gray-500 dark:text-gray-400 transform transition-transform duration-300"
      id="toggle-icon"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M11 19l-7-7 7-7m8 14l-7-7 7-7"
      />
    </svg>
  </div>
</div>

<div
  class="fixed inset-0 z-10 hidden bg-gray-900/50 dark:bg-gray-900/90"
  id="sidebarBackdrop"
>
</div>

<script>
  document.addEventListener("astro:page-load", () => {
    const sidebar = document.getElementById("sidebar");
    const toggleButton = document.getElementById("toggle-aside");
    const toggleIcon = document.getElementById("toggle-icon");
    const mainContent = document.querySelector("main");
    
    let isCollapsed = localStorage.getItem("sidebarCollapsed") === "true";
    
    function updateSidebar() {
      if (isCollapsed) {
        sidebar?.classList.add("-translate-x-[calc(100%-0.2rem)]");
        toggleButton?.classList.add("translate-x-full");
        toggleIcon?.classList.add("rotate-180");
        mainContent && mainContent.classList.remove("lg:ml-64");
      } else {
        sidebar && sidebar.classList.remove("-translate-x-[calc(100%-0.2rem)]");
        toggleButton?.classList.remove("translate-x-full");
        toggleIcon?.classList.remove("rotate-180");
        mainContent && mainContent.classList.add("lg:ml-64");
      }
    }

    if (toggleButton) {
      toggleButton.onclick = () => {
        isCollapsed = !isCollapsed;
        localStorage.setItem("sidebarCollapsed", isCollapsed.toString());
        updateSidebar();
      };
    }

    // Initialize sidebar state immediately
    updateSidebar();
  });

  // Add view transition handler
  document.addEventListener("astro:after-swap", () => {
    const sidebar = document.getElementById("sidebar");
    const toggleButton = document.getElementById("toggle-aside");
    const toggleIcon = document.getElementById("toggle-icon");
    const mainContent = document.querySelector("main");
    
    let isCollapsed = localStorage.getItem("sidebarCollapsed") === "true";
    
    if (isCollapsed) {
      sidebar?.classList.add("-translate-x-[calc(100%-0.2rem)]");
      toggleButton?.classList.add("translate-x-full");
      toggleIcon?.classList.add("rotate-180");
      mainContent && mainContent.classList.remove("lg:ml-64");
    }
  });
</script>
