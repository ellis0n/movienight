---
interface Props {
  rating: {
    id: number;
    movieId: number;
    score: number;
    movieTitle: string;
  };
}

// @ts-ignore
import { actions } from "astro:actions";
import { getCollection } from "astro:content";
const { id, score, movieId, movieTitle } = Astro.props.rating;

// Movie content
const Movies = await getCollection("Movies");
const movie = Movies.find((m) => m.id === movieId.toString());

const rating = await Astro.callAction(actions.ratings.getRatingById, {
  ratingId: id.toString(),
});

if (!rating) return Astro.redirect("/404");
const result = await Astro.getActionResult(actions.ratings.updateScore);
---

<div class="container mx-auto text-white">
  <h1 class="text-4xl font-bold mb-4">Edit Rating</h1>
  {
    rating && movie ? (
      <>
        {result ? (
          <p class="text-lg mt-6 text-green-500">{result.data?.message}</p>
        ) : null}
        <h2>{movieTitle}</h2>
        <p class="text-lg mt-6">Score: {rating.data?.score}</p>
        <form
          class="mt-6 space-y-4"
          method="POST"
          action={
            `${Astro.params.id}/viewers/${Astro.params.ratingId}` +
            actions.ratings.updateScore
          }
        >
          <label for="score" class="block text-sm font-medium text-gray-300">
            Score
          </label>
          {id && <input type="hidden" name="id" value={id.toString()} />}
          <input
            type="number"
            name="score"
            id="score"
            min="1"
            max="10"
            step="0.1"
            value={(score ?? "").toString()}
            class="mt-1 block w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md
          shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500
          sm:text-sm"
          />
          <button
            type="submit"
            class="w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Save
          </button>
        </form>

        {result && result.error ? (
          <p class="text-lg mt-6 text-red-500">{result.error}</p>
        ) : null}
      </>
    ) : (
      <p class="text-lg mb-6">Rating not found.</p>
    )
  }
</div>

<script>
  import { actions } from "astro:actions";
  import { navigate } from "astro:transitions/client";

  const form = document.querySelector("form");
  form?.addEventListener("submit", async (event) => {
    event.preventDefault();
    const formData = new FormData(form);
    const { error } = await actions.ratings.updateScore(formData);
    if (!error) {
      navigate(`/viewers/${Astro.params.id}/ratings/${Astro.params.ratingId}`);
    }
  });
</script>
