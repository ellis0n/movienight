---
interface Props {
  rating: {
    id: number;
    movieId: number;
    score: number; // Score to be updated (initial value)
    movieTitle: string;
  };
}

// @ts-ignore
import { actions } from "astro:actions";
const { id, score } = Astro.props.rating;

// Movie content

const getRating = await Astro.callAction(actions.ratings.getRatingById, {
  ratingId: id,
});

const { data: rating, error: ratingError } = getRating;

if (!rating || ratingError) return Astro.redirect("/404");
---

<div class="container mx-auto text-white">
  {
    rating ? (
      <>
        <div id="message" class="text-lg mt-6 text-green-500 hidden" />
        <p class="text-lg mt-6">
          Current Score: <span id="currentScore">{rating.score}</span>
        </p>
        <form
          class="mt-6 space-y-4"
          method="POST"
          action={actions.ratings.updateScore}
        >
          <label for="score" class="block text-sm font-medium text-gray-300">
            New Score
          </label>
          {id && <input type="hidden" name="id" value={id.toString()} />}
          <input
            type="number"
            name="score"
            id="score"
            min="1"
            max="10"
            step="0.1"
            value={(score ?? "").toString()}
            class="mt-1 block w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md
            shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500
            sm:text-sm"
          />
          <button
            type="submit"
            class="w-full inline-flex justify-center py-2 px-4 border border-transparent 
            shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 
            hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 
            focus:ring-blue-500"
          >
            Save
          </button>
        </form>
      </>
    ) : null
  }
</div>

<script>
  import { actions } from "astro:actions";

  const form = document.querySelector("form");
  const messageDiv = document.getElementById("message");
  const currentScoreSpan = document.getElementById("currentScore");
  const scoreInput = document.getElementById("score") as HTMLInputElement;

  // Function to sync the form input with the current score
  const syncScoreInput = () => {
    if (currentScoreSpan && scoreInput) {
      scoreInput.value = currentScoreSpan.textContent || "";
    }
  };

  // Initial sync on page load
  syncScoreInput();

  form?.addEventListener("submit", async (event) => {
    event.preventDefault();
    const formData = new FormData(form);
    const response = await actions.ratings.updateScore(formData);

    if (response.data?.success) {
      // Update the displayed score
      if (currentScoreSpan) {
        currentScoreSpan.textContent = formData.get("score")?.toString() ?? "";
      }

      // Sync the form input with the new score
      syncScoreInput();

      // Show success message
      if (messageDiv) {
        messageDiv.textContent =
          response.data?.message ?? "Score updated successfully";
        messageDiv.classList.remove("hidden");
        messageDiv.classList.add("text-green-500");
        messageDiv.classList.remove("text-red-500");

        setTimeout(() => {
          messageDiv.classList.add("hidden");
        }, 3000);
      }
    } else {
      // Show error message
      if (messageDiv) {
        messageDiv.textContent =
          response.data?.error || "Failed to update rating";
        messageDiv.classList.remove("hidden");
        messageDiv.classList.remove("text-green-500");
        messageDiv.classList.add("text-red-500");
      }
    }
  });

  // Optional: Add event listener for page visibility changes
  document.addEventListener("visibilitychange", () => {
    if (document.visibilityState === "visible") {
      syncScoreInput();
    }
  });
</script>
