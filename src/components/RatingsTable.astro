---
import TheList from "@components/Tables/TheList";
import { actions } from "astro:actions";

const getMovies = await Astro.callAction(actions.movies.getAllMovies, {
  sort: "DATE_ASC",
});
const getViewers = await Astro.callAction(actions.viewers.getAllViewers, {});
const getRatings = await Astro.callAction(actions.ratings.getAllRatings, {});

const movies = getMovies.data || [];
const viewers = Array.isArray(getViewers.data) ? getViewers.data : [];
const ratings = getRatings.data
  ? Array.isArray(getRatings.data)
    ? getRatings.data
    : getRatings.data.rows || []
  : [];

// Structure the data
const movieList = movies.map((movie) => {
  const movieRatings = ratings
    .filter((rating) => rating.movieId === movie.id)
    .map((rating) => ({
      viewerId: rating.viewerId,
      score: rating.score,
    }));

  // Calculate the average rating
  const averageRating =
    movieRatings.length > 0
      ? movieRatings.reduce(
          (acc, rating) =>
            acc + (typeof rating.score === "number" ? rating.score : 0),
          0
        ) / movieRatings.length
      : 0; // Handle division by zero

  // Prepare the object for each movie
  const formattedRatings = viewers.map((viewer) => {
    const rating = movieRatings.find((r) => r.viewerId === viewer.id);
    return {
      [`viewer_${viewer.id}`]: rating ? rating.score : "N/A", // Score or "N/A"
    };
  });

  return {
    id: movie.id,
    title: movie.title,
    date: movie.date,
    averageRating: averageRating.toFixed(2), // Format average to 2 decimal places
    ...Object.assign({}, ...formattedRatings), // Merge viewer scores into the object
  };
});
---

<div class="container mx-auto p-6 bg-gray-900 text-white rounded-lg shadow-xl">
  <TheList movieList={movieList} viewers={viewers} client:load />
</div>
