---
interface Props {
  title: string;
}

import Header from "../components/Header.astro";
import Aside from "../components/Aside.astro";
import { ViewTransitions } from "astro:transitions";

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <ViewTransitions />
    <title>{title}</title>
  </head>
  <body>
    <Header />
    <Aside />
    <div
      class="flex
      pt-16
      overflow-hidden
      bg-gray-50
      dark:bg-gray-900"
    >
      <main
        class="relative
        w-full
        h-full
        overflow-y-auto
        bg-gray-50
        lg:ml-64
        dark:bg-gray-900
        min-h-screen"
      >
        <slot />
      </main>
    </div>
  </body><style is:global>
    :root {
      --accent: 136, 58, 234;
      --accent-light: 224, 204, 250;
      --accent-dark: 49, 10, 101;
      --accent-gradient: linear-gradient(
        45deg,
        rgb(var(--accent)),
        rgb(var(--accent-light)) 30%,
        white 60%
      );
    }
    html {
      font-family: system-ui, sans-serif;
      background: #13151a;
    }
    code {
      font-family:
        Menlo,
        Monaco,
        Lucida Console,
        Liberation Mono,
        DejaVu Sans Mono,
        Bitstream Vera Sans Mono,
        Courier New,
        monospace;
    }
  </style>
</html>
<script>
  document.addEventListener("astro:page-load", () => {
    const sidebar = document.getElementById("sidebar");
    const sidebarBackdrop = document.getElementById("sidebarBackdrop");
    const toggleSidebarMobileHamburger = document.getElementById(
      "toggleSidebarMobileHamburger"
    );
    const toggleSidebarMobileClose = document.getElementById(
      "toggleSidebarMobileClose"
    );

    if (
      sidebar &&
      sidebarBackdrop &&
      toggleSidebarMobileHamburger &&
      toggleSidebarMobileClose
    ) {
      const toggleSidebarMobile = () => {
        sidebar.classList.toggle("hidden");
        sidebarBackdrop.classList.toggle("hidden");
        toggleSidebarMobileHamburger.classList.toggle("hidden");
        toggleSidebarMobileClose.classList.toggle("hidden");
      };

      const attachEventListeners = () => {
        const toggleSidebarMobileEl = document.getElementById(
          "toggleSidebarMobile"
        );
        const toggleSidebarMobileSearch = document.getElementById(
          "toggleSidebarMobileSearch"
        );

        if (toggleSidebarMobileSearch) {
          toggleSidebarMobileSearch.onclick = toggleSidebarMobile;
        }

        if (toggleSidebarMobileEl) {
          toggleSidebarMobileEl.onclick = toggleSidebarMobile;
        }

        // Handle clicks outside the sidebar
        document.addEventListener("click", (event) => {
          if (
            !sidebar.contains(event.target as Node) &&
            !(event.target as Element).closest(
              "#toggleSidebarMobile, #toggleSidebarMobileHamburger, #toggleSidebarMobileClose, #toggleSidebarMobileSearch"
            )
          ) {
            sidebar.classList.add("hidden");
            sidebarBackdrop.classList.add("hidden");
            toggleSidebarMobileHamburger.classList.remove("hidden");
            toggleSidebarMobileClose.classList.add("hidden");
          }
        });
      };

      // Attach event listeners initially
      attachEventListeners();

      // Use MutationObserver to reattach event listeners if elements are replaced
      const observer = new MutationObserver(() => {
        attachEventListeners();
      });

      observer.observe(document.body, { childList: true, subtree: true });
    }
  });
</script>
